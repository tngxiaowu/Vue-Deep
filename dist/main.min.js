(function(modules){
    var installedModules = {};
    // 定义require函数
    function __webpack_require__(moduleId){
        // 如果有缓存 那么返回缓存结果
        if(installedModules[moduleId]){
            return installedModules[moduleId].exports;
        }

        var module = installedModules[moduleId] = {
            i: moduleId,
            l: false,
            exports:{ },
        }

        // 执行模块内函数(注意其参数)
        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__)

        // 标记已执行
        module.l = true;

        // 输出模块执行结果
        return module.exports;
    }

    //  require函数一系列方法
    __webpack__require__.m = modules;
    __webpack__require__.c = installedModules;
    __webpack__require__.d = function(){}
    __webpack__require__.r = function(){}
    __webpack__require__.t = function(){}
    __webpack__require__.n = function(){}
    __webpack__require__.o = function(){}
    __webpack__require__.p = function(){}

    // 执行require函数
    return __webpack__require__(__webpack__require__.s = 0);


})([ 
    (function(module,exports,__webpack__require__){
        (function(__dirname){}.call(this,'/')) // 执行该函数
    }),

     (function(module,exports,__webpack__require__){}),
     (function(module,exports){
         var process = module.exports = {};
         
         // 对setTimeout和clearTimeout进行能力检测
         let cachedSetTimeout,
             cachedClearTimeout;
          (function(){
            if(typeof setTimeout === 'function'){
                cachedClearTimeout = setTimeout;
            }

            if(typeof clearTimeout === 'function'){
                cachedClearTimeout = clearTimeout;
            }

          }())
          // 执行setTimeout和clearTimeout
          function runTimeout(){}
          function runClearTimeout(){}
        
          // 定义队列
          var queue = [];
          var draining = false;
          var currentQueue;
          var queueIndex = -1;

          function cleanUpNextTick(){}
          function drainQueue(){}

          function Item(fun,array){
              this.fun = fun;
              this.array = array;
          }

          Item.prototype.run = ()=>{}
          
          // 重写process一系列属性和方法
          process.nextTick =  ()=>{

          }
     })]
  );


